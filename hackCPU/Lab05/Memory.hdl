// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/Memory.hdl
/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load=1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid and reads 0. Access to any address
 * in the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the Screen
 * and Keyboard chip specifications given in the lectures and the book.
 */
CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
	//// Replace this comment with your code.
    Not(in=address[14],out=n15);

    And(a=n15 , b=load , out=loadRam );
    RAM16K(in=in , load=loadRam , address=address[0..13] , out=outRam );

    And(a=address[14] , b=load , out=loadScreen);
    Screen(in=in , load=loadScreen , address=address[0..12] , out=outScreen );

    Keyboard(out=outK );

    DMux4Way(in=true , sel=address[13..14] , a=a , b=b , c=c , d=d );
    
    Or(a=a , b=b , out=selRam );
    Mux16(a=false , b=outRam , sel=selRam , out=oRam );

    Mux16(a=oRam , b=outScreen , sel=c , out=oScrRam );

    Or8Way(in=address[0..7] , out=or8 );
    Or8Way(in[0..4]=address[8..12],in[5..7]=false , out=or12 );
    Not(in=or12 , out=or12Not );
    And(a=d , b=or12Not , out=selK );
    Mux16(a=oScrRam,b=outK,sel=selK, out=out);
    //16384 => 0 10 0
    //keyb =>  0 11 0





}