// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	//// Replace this comment with your code.
    Mux16(a=instruction , b=aluOut , sel=instruction[15] , out=aRegIn );

    And(a=instruction[15] , b=instruction[5] , out=ldA );
    Not(in=instruction[15] , out=cinstr );
    Or(a=ldA , b=cinstr , out=loadA );
    ARegister(in=aRegIn , load=loadA , out=aRegOut, out[0..14]=addressM ); //A register

    And(a=instruction[15] , b=instruction[4] , out=loadD );
    DRegister(in=aluOut, load=loadD, out=dRegOut);    //D register

    And(a=instruction[15],b=instruction[3], out=writeM);//write to memory
    
    And(a=instruction[15] , b=instruction[12] , out=selY); 
    Mux16(a=aRegOut , b=inM , sel=selY , out=yReg );

    ALU(x=dRegOut , y=yReg , zx=instruction[11] , nx=instruction[10] , zy=instruction[9] , ny=instruction[8] , f=instruction[7] , no=instruction[6] , out=aluOut, out=outM , zr=zr , ng=ng );


    DMux8Way(in=instruction[15] , sel=instruction[0..2] , a=j0 , b=j1 , c=j2 , d=j3 , e=j4 , f=j5 , g=j6 , h=j7 ); 
   
    //zr=zr , ng=ng
    Not(in=zr , out=zrNot);
    Not(in=ng,out=ngNot);
    
    And(a=zrNot , b=ngNot , out=gt );And(a=j1 , b=gt , out=JGT );
    And(a=zr , b=j2 , out=JEQ );
    And(a=ngNot , b=j3 , out=JGE );
    And(a=j4,b=ng,out=JLT);
    And(a=j5 ,b=zrNot , out=JNE );
    Or(a=zr , b=ng , out=le );And(a=j6 , b=le , out=JLE );
    Or8Way(in[0]=false,in[1]=JGT, in[2]=JEQ, in[3]=JGE, in[4]=JLT, in[5]=JNE, in[6]=JLE , in[7]=j7, out=loadPC);

    Not(in=loadPC , out=incPC );
    PC(in=aRegOut , load=loadPC , inc=incPC , reset=reset , out[0..14]=pc );
       
}