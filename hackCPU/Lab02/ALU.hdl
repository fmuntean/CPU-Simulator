// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:

    //// Replace this comment with your code.

// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not

    Mux16(a=x , b=false , sel=zx , out=m1 );
    Not16(in=m1 , out=m2 );
    Mux16(a=m1 , b=m2 , sel=nx , out=m3 );
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
    Mux16(a=y , b=false , sel=zy , out=m4 );
    Not16(in=m4 , out=m5 );
    Mux16(a=m4 , b=m5 , sel=ny , out=m6 );

// if (f == 1)  sets out = x(m3) + y(m6)  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
    Add16(a =m3 , b =m6 , out = m7);
    And16(a= m3, b= m6, out=m8 );
    Mux16(a=m8 , b=m7 , sel=f , out= m9 );


// if (no == 1) sets out = !out   // bitwise not
    Not16(in=m9 , out=m10 );
    Mux16(a=m9 , b=m10 , sel=no , out=out, out[0..7]=outLsb, out[8..15]=outMsb, out[15]=ng );

    Or8Way(in=outLsb , out=z0 );
    Or8Way(in=outMsb , out=z1 );
    Or(a=z0 , b=z1 , out=z2 );
    Not(in=z2 , out=zr );
       

}